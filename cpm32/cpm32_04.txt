
		CP/M-80 program EXEcutor for Win32 V0.4
			      cpm.exe
		Copyright (C) 2005-2012 by Keiji Murakami


０．はじめに

  MS-DOS 版 cpm.exe の 15 周年記念ということで、Win32 版を作ってみました。

　以下の特徴を MS-DOS 版から受け継いでいます。

　　1) コマンドプロンプトから CP/M-80 のプログラムを直接実行
    2) バッチファイルや Makefile 内で CP/M-80 のプログラムを実行可能
　　3) 添付の常駐型 CCP により CP/M 環境に入って操作可能
　　4) HI-TECH C 対応
　　5) MBASIC 対応

　また以下の機能が新たに追加されました。

　　1) Win32 ネイティブ対応
    2) 自前の BDOS エミュレーションによるより良いファイルハンドリング
    3) 環境変数 CPMPATH による CP/M プログラム用サーチパス指定
    4) 環境変数による CP/M デバイスのファイルへのリダイレクション
    5) 環境変数による CP/M ドライブへのディレクトリ割り当て
    6) ディレクトリ付き引数による自動ドライブ割り当て
    7) コンソール入力時ウエイトによる CPU 使用率・速度調節
    8) ANSI + SOLOC 端末エミュレーション
    9) 入力リダイレクト時の Ctrl-Z 自動生成と自動プログラム終了
    10) HI-TECH C スタイル終了コード対応
    11) A:$$$.SUB 消去時のエラー終了機能対応（BDS-C 用エラー検出）


１．走行環境

  CPU: 80386 互換
　OS:  Windows 95, 98, Me, NT, 2000, XP, Vista, 7（NT 以降を推奨）
	（Linux + Wine でも動作します）


２．エミュレーション環境

  CPU:
	Z80 （HD64180 命令と一部未定義命令を含み、IO 命令を除く）

  OS:
	CP/M-80 Ver2.2 相当（一部 Ver3.0 BDOS コールを含む）

  メモリマップ：
	0000h 〜 00FFh	.. ゼロページ
	0100h 〜 FDFFh  .. TPA
	FE00h 〜 FEFFh  .. BDOS ＋ ワークエリア
	FF00h 〜 FFFFh  .. BIOS ＋ ワークエリア

  ドライブアサイン：
	A:   .. CP/M-80 プログラムディレクトリ（-a オプション時選択ドライブ）
	B:   .. カレントディレクトリ （デフォルト選択ドライブ）
	C:   .. 第１,第２パラメタで指定された最初のディレクトリ（自動ドライブ
		アサイン）または、環境変数 CPMC で指定されるディレクトリ
	D:   .. 第１,第２パラメタで指定された２番目のディレクトリ（自動ドライ
		ブアサイン）または、環境変数 CPMD で指定されるディレクトリ
	E:   .. 環境変数 CPME で指定されるディレクトリ
	：	  ：
	P:   .. 環境変数 CPMP で指定されるディレクトリ

   デバイスアサイン：
	LST: .. 環境変数 CPMLST で指定されるファイルまたはデバイス
		デフォルト "PRN:"
	RDR: .. 環境変数 CPMRDR で指定されるファイルまたはデバイス
		環境変数 CPMAUX で指定されるファイルまたはデバイス
		デフォルト "AUX:"
	PUN: .. 環境変数 CPMPUN で指定されるファイルまたはデバイス
		環境変数 CPMAUX で指定されるファイルまたはデバイス
		デフォルト "AUX:"

２．クイックスタート

　まず、CP/M-80 プログラムを Windows に持ってきます。このとき、拡張子 ".com"
を ".cpm" にしておけば、Windows の実行ファイルと誤認することがなくなります。
　CP/M-80 のプログラムを実行するには、第一引数を CP/M-80 のプログラム名とし、
その後に CP/M-80 のプログラムに与えるパラメータを書きます。

	cpm プログラム名 パラメータ...

　つまり、CP/M のコマンドラインの前に "cpm" を付けたようなかっこうになります。
例えば、カレントディレクトリにある zsid.cpm を使って test.com デバッグするに
は、次の様にします。

	cpm zsid test.com

　また、他のディレクトリにある CP/M プログラムも実行することができます。

	cpm b:\cpm\turbo

　それでは、

	cpm

のように何も指定しなかったらどうなるかというと、タイトルと簡単な使い方を表示
します。

　CP/M プログラムの拡張子としては以下のものが使用できます。

	.cpm	通常の CP/M プログラム
	.com	バージョン取得（BDOS No12）で 122h（MP/M）と返答

　また拡張子まで指定することで、任意の拡張子のファイルを実行することができま
す。

	cpm prog.z80


３．使用法

	Usage: CPM [-hxapdC][-w[0-9]] command arg1 arg2 ...
		-h .. return HI-TECH C exit code
		-x .. return ERROR if A:$$$.SUB deleted
		-a .. select A: (program directry)
		-p .. pause before exit
		-d .. disable auto drive assign
		-C .. args to uppercase
		-w[0-9] .. wait on console status check (9:max)

	コマンドライン引数の説明

	command	.. CP/M-80 のプログラムファイルを指定します。

		   拡張子が省略されると .cpm または .com を補って探索します。

		   ドライブとディレクトリが省略された場合、カレントドライブの
		   カレントディレクトリのほかに環境変数 CPMPATH で指定された
		   ディレクトリからファイルを探索します。

	arg<n>  .. CP/M-80 のプログラムに渡すパラメタを指定します。

		   -d オプションが指定されていないとき、最初の２つのパラメタ
		   による自動ドライブアサインが行われます。これらのパラメタ
		   が実在するディレクトリの指定を含んでいる場合、C:, D: ドラ
		   イブにそのディレクトリを自動的に割り当て、パラメタのディレ
		   クトリ指定を、割り当先ドライブレターに置き換えます。

	オプションの説明

	-h	HI-TECH C スタイルの終了コードを返します。
		アドレス 0x80 から２バイトを終了コードとします。

		このオプションは -x と排他的であり後に指定された方が有効に
		なります。

	-x	A:$$$.SUB に対する削除 BDOS コールが行われた場合に終了コード
		を 2 とします。それ以外は 0 を返します。

		BDS-C などはオプションによって、エラー発生時にサブミットを中断
		するため上記 BDOS コールを発行します。-x オプションを指定すると
		このようなアプリケーションで発生したエラーの有無を終了コードに
		反映することができます。

		このオプションは -h と排他的であり後に指定された方が有効に
		なります。

	-a	A：ドライブを選択します。

		CPM.EXE は、CP/M-80 プログラムファイルのあるディレクトリを 
		A: ドライブに、カレントディレクトリを B: ドライブに割り当て
		た上で、通常 B: ドライブを選択した状態でプログラムの実行を
		始めます。-a オプションはこの動作を修正し、A: ドライブを選択
		した状態でプログラムを実行します。

		このオプションは、実行に必要なファイル（ライブラリやオーバー
		レイ）が、選択ドライブに無ければならないようなアプリケーション
		で使用します。（ex. BDS-C のデフォルト）

	-p	終了前に、いずれかのキーが押されるまで停止します。

		lnk ファイルダブルクリックで CP/M-80 プログラムを実行する場合
		などでは終了後すぐにコンソールが閉じてしまいますが、このオプ
		ションを使用すれば、CP/M-80 プログラムの終了表示を読むことが
		できます。

	-d	CP/M-80 パラメタによる自動ドライブアサイン機能を停止します。

		通常 CPM.EXE は、CP/M-80 プログラムに渡す第１・第２パラメタ
		（arg1, arg2) が実在するディレクトリの指定を含んでいるとき、
		C:, D: ドライブにそのディレクトリを自動的に割り当て、パラメタ
		のディレクトリ指定を、割り当て先ドライブレターに置き換えます。

		このオプションは、上記のような自動ドライブアサイン機能を抑止
		し、パラメタをそのまま CP/M-80 プログラムに引き渡します。

	-C	コマンドラインパラメタを大文字に変換します。

		オリジナル CCP は、コマンドラインパラメタを大文字化して 80h
		やデフォルト FCB へ格納しますが、この動作に近づけます。

		zlink など、パラメタが大文字でなければ誤動作するプログラムの
		ために使用することができます。

	-w[0-9]	コンソールステータス検査 BDOS コールにウェイトを入れます。

		数字 0-9 はウェイト量で、値が大きいほど遅くなります。
		数字が指定されないときは 1 とみなします。

		インタラクティブなゲームなどが速すぎるときに、速度調節のために
		使用することができます。またインタラクティブなプログラムの実行
		中に CPU 使用率が 100 ％になってしまうのを防ぐために使用するこ
		ともできます。

	環境変数

	CPMPATH	     .. CP/M-80 プログラムファイルの探索パスを指定します。
			環境変数 PATH と同様の形式です。

	CPMC〜CPMP   .. それぞれ C: 〜 P: ドライブに割り当てるディレクトリを
			指定します。ただし、CPMC, CPMD はパラメタによる自動
			ドライブアサインが行われた場合には無視されます。

	CPMLST       .. CP/M-80 の LST: 出力デバイスに割り当てるファイルまたは
			デバイスを指定します。デフォルト値は "PRN:" です。

	CPMRDR       .. CP/M-80 の RDR: 入力デバイスに割り当てるファイルまたは				デバイスを指定します。この環境変数がなければ環境変数 
			CPMAUX が用いられます。

	CPMPUN       .. CP/M-80 の PUN: 出力デバイスに割り当てるファイルまたは				デバイスを指定します。この環境変数がなければ環境変数 
			CPMAUX が用いられます。

	CPMAUX       .. CPMRDR, CPMPUN 環境変数が無いとき、CP/M-80 の RDR: PUN:
			デバイスに割り当てるファイルまたはデバイスを指定します。			この環境変数で指定されたファイルまたはデバイスはリード
			ライトモードでオープンされ、RDR: デバイスを通じて読み
			出され、PUN:デバイスを通じて書き込まれます。
			デフォルト値は "AUX:" です。


４． Z80 (HD64180) エミュレータについて

　本プログラムは、Z80 の命令に加えて HD64180 の拡張命令 MLT,TST もサポートして
います。 但し、HALT SLP i/o命令はサポートしておらず、実行しようとすると、

	「ERROR: Illegal op-code executed. xxxx」
または
	「ERROR: Halted. xx」

というメッセージを出して終了します。また、IM0 IM1 IM2 EI DI は単なる NOP です
し、RETI RETN は RET と同じ動作をします。

　Z80 や HD64180 では、R レジスタが OP コードフェッチの度に増加しますが本プロ
グラムではまじめにやっていません。代わりに、LD A,R 命令で R レジスタを種とす
る乱数を発生させています。R レジスタの初期値は起動時の時刻から決めているため
毎回異なる系列の乱数になります。

　それから通常問題にはならないと思いますが、H フラグと N フラグは算術演算以外
の命令では正しく動きません。

  次のような Z80 の有名な未定義命令もサポートしています。

	LD	IXH,r	DD 60 〜 DD 67  (01100xxx)
	LD	IXL,r	DD 68 〜 DD 6F  (01101xxx)
	LD	IYH,r	FD 60 〜 FD 67  (01100xxx)
	LD	IYL,r	FD 68 〜 FD 6F  (01101xxx)
	LD	r,IXH	DD 44 〜 DD 7C  (01xxx100)
	LD	r,IXL	DD 45 〜 DD 7D  (01xxx101)
	LD	r,IYH	FD 44 〜 FD 7C  (01xxx100)
	LD	r,IYL	FD 45 〜 FD 7D  (01xxx101)
	op	A,IXH	DD 84 〜 DD BC  (10xxx100)
	op	A,IXL	DD 85 〜 DD BD  (10xxx101)
	op	A,IYH	FD 84 〜 FD BC  (10xxx100)
	op	A,IYL	FD 85 〜 FD BD  (10xxx101)

	r=  B   C   D   E   A		op= ADD ADC SUB SBC AND XOR OR  CP
	xxx 000 001 010 011 111		xxx 000 001 010 011 100 101 110 111

　また、BDOS, BIOS 機能を呼び出すための命令を拡張しています。これらのコードは
 V20/30 の 8080 エミュレーションモード時の拡張命令に合わせてあります。

	ED ED 00   CALLN 0	.. BDOS 呼び出し
	ED ED xx   CALLN xx	.. BIOS 呼び出し
	ED FD      RETEM	.. エミュレーション終了


６．BDOS コールについて

　BDOS の機能は Win32 側の C プログラムで実現されています。Z80（HD64180）側の
コードは CALLN 0; RET だけです。

　以下の BDOS コールサポートしていません。「Unsupported BDOS call: xx」という
メッセージを出して何もしません。HL,A は 0 で戻ります。存在しない BDOS コールに
ついても同様です。

	No.7  IO バイトの取出し
	No.8  IO バイトの設定
	No.28 ディスクの書き込み保護
	No.29 R/O ベクトルの取出し
	No.30 ファイル属性の設定

　また、以下の BDOS コールは適当にごまかしています。

	No.12 バージョン番号の取出し
		A, および HL レジスタにバージョン番号を返します。
		バージョン番号の上位バイトは、実行プログラムの拡張子によって
		変化します。MP/M を偽装することによって HI-TECH C 80 のランタイ
		ムライブラリがリードオープン時にもファイルを閉じるようになりま
		す。

		  拡張子	A   HL		説明
		  .cpm		22h 0022h	CP/M-80 2.2
		  それ以外	22h 0122h	MP/M 2.2（存在しない）

	No.27 アロケーションベクタの取出し
		ダミーのアロケーションベクタのアドレスを返します。

	No.31 ディスクパラメータブロックの取出し
		ディスクの残り容量を取得し、ダミーのディスクパラメータ
		ブロックとアロケーションベクタをでっち上げて、ディスク
		パラメータブロックのアドレスを返します。

	No.32 ユーザーコードの取出し／設定
		何の効果もありませんが、設定したユーザーコードを取出せ
		ます。

  CP/M-80 3.0 の拡張 BDOS コールのうち、以下のものもサポートしています。
これらは HI-TECH C 80 のランタイムライブラリで使用されます。

	No.102 ファイル時刻取得
	No.105 現在時刻取得


７．BIOS コールについて

　以下の BIOS コールのみサポートしています。

	00h  コールドスタート
	03h  リブート
		これらはプログラムを正常終了させます。

	06h  コンソールステータスの取出し
		標準入力が入力可能かどうかを調べています。
		入力可能でなく -w オプションが指定されている場合、指定された
		値に応じた頻度・長さで Sleep します。

	09h  コンソールからの１文字入力
		標準入力から１文字入力します。
		もし標準入力がコンソールなら、キーコード変換も行ないます。
		また、標準入力がダイレクトされていてファイルの末尾に到達した
		後に呼び出されたなら、16 回まで Ctrl-Z (1A) を入力文字としま
		す。16 回を超えて呼び出されたなら、自動的にプログラムを終了
		します。このとき終了コードは 3 になります。

	0ch  コンソールへの１文字出力
		標準出力へ１文字出力します。
		もし標準出力がコンソールなら、ANSI, SOLOC の画面制御コード
		を解釈します。

	0fh  リストへの出力
		環境変数 CPMLST で指定されたファイルまたはデバイスへ１文字
		出力します。指定されていなければ PRN: に出力します。

	12h  パンチへの出力
		環境変数 CPMPUN で指定されたファイルまたはデバイスへ１文字
		出力します。CPMPUN が指定されていなければ、環境変数 CPMAUX 
		で指定されたファイルまたはデバイスをリードライトモードで
		オープンして出力します。CPMAUX も指定されていなければ、AUX: 
		をリードライトモードでオープンして出力します。

	15h  リーダからの入力
		環境変数 CPMRDR で指定されたファイルまたはデバイスから１文字
		入力します。CPMRDR が指定されていなければ、環境変数 CPMAUX 
		で指定されたファイルまたはデバイスをリードライトモードで
		オープンして入力します。CPMAUX も指定されていなければ、AUX: 
		をリードライトモードでオープンして入力します。

　サポートしていない BIOS コールが呼び出されたなら「ERROR: Unsupported BIOS
 call: xx」と表示して、cpm.exe を終了します。


８．端末エミュレーション

　標準出力がリダイレクトされておらずコンソールになっている場合、cpm.exe は
画面制御コードを解釈して、ANSI および SOLOC 端末をエミュレートします。

    ANSI 画面制御コード

	ESC [ y ; x H	カーソルを（x,y) へ移動 絶対位置指定
	ESC [ y ; x f		〃
	ESC [ dy A	カーソルを dy だけ上へ移動
	ESC [ dy B	カーソルを dy だけ下へ移動
	ESC [ dx C	カーソルを dx だけ左へ移動
	ESC [ dx D	カーソルを dx だけ右へ移動
	ESC [ J		カーソル〜画面右下を消去
	ESC [ 1 J	画面左上〜カーソルを消去
	ESC [ 2 J	全画面消去
	ESC [ K		カーソル〜行末消去
	ESC [ 1 K	行頭〜カーソル消去
	ESC [ 2 K	カーソル行消去
	ESC [ dy M	カーソル行〜画面下端を dy だけ上スクロール
	ESC [ dy L	カーソル行〜画面下端を dy だけ下スクロール
	ESC [ u		カーソル位置リストア
	ESC [ s		カーソル位置セーブ
	ESC [ m		文字属性クリア
	ESC [ ... m	文字属性設定

	   文字属性コード
		1	ハイライト
		4	下線
		7	リバース
		16〜23	文字色 (黒,緑,赤,黄,青,シアン,マゼンタ,白)
		30〜37	文字色 (黒,緑,青,シアン,赤,黄,マゼンタ,白)
		40〜47	背景色 (黒,緑,青,シアン,赤,黄,マゼンタ,白)

    SOLOC 画面制御コード

	CLS  (1Ah)	画面消去
	ESC *		画面消去
	ESC = y x	カーソルを (x-20h,y-20h) へ移動
	ESC (		文字ハイライト指定
	ESC )		文字ハイライト解除
	ESC t		カーソル〜行末を消去
	ESC T		カーソル〜行末を消去
	ESC y		カーソル〜画面右下を消去
	ESC Y		カーソル〜画面右下を消去
	ESC E		カーソル行〜画面下端を１行下スクロール
	ESC R		カーソル行〜画面下端を１行上スクロール
	ESC D		カーソル上移動 上端でスクロール
	ESC M		カーソル下移動 下端でスクロール

　標準入力がリダイレクトされておらずコンソールになっている場合、cpm.exe は
キーコード変換を行い、ファンクションキー押下で以下のようなコードを入力します。

	UP	05h (^E)
	DOWN	18h (^X)
	LEFT	13h (^S)
	RIGHT	04h (^D)
	INS	16h (^V)
	DEL	7Fh
	PgUP	12h (^R)
	PgDOWN	03h (^C)
	^UP	17h (^W)
	^DONW	1ah (^Z)
	^LEFT	01h (^A)
	^RIGHT	06h (^F)


８．コンパイル

　cpm.exe のコンパイルには Borland C++ Builder が必要です。
  em180.asm, z80op.txt を再生成するには jperl.exe が必要です。
  src\Makefile を参照してください。

　V0.4 以降では VC++ でのビルドに対応しました。src\Makefile の先頭付近で
　 BCC 用の定義をコメントアウトし、VC++ 用の定義を有効化して使用してください。

  また、添付プログラム RCCP.COM, 4GCLOCK.COM のアセンブル、INFO0P.COM の
　コンパイルには HI-TECH C 80 が必要です。
  utl\Makefile を参照してください。


１０．CP/M プログラムの入手について

　CP/M の商用プログラムは、遥かな昔に販売・サポートが打ち切られており、販売店
から新たに入手することは困難です。しかし、以下のサイトからフリーなプログラムが
ダウンロード可能になっています。

	The Unofficial CP/M Web site 
	http://www.cpm.z80.de/
		CP/M 本体, CBASIC, COBOL-80, 各種 FORTH, MAC, PASCAL MT+,
		PL/I 80, PL/M, ZSID, BDS-C, Modula-2, SMALL C など

	BDS C: An 8080/Z80 C Compiler
	http://www.bdsoft.com/resources/bdsc.html

	HI-TECH Z80 CP/M C Compiler (version 3.09)
	http://www.retroarchive.org/cpm/cdrom/SIMTEL/HITECH-C/
	（本家での配布は終了したようです）

	the Walnut Creek CP/M CD-ROM online
	http://www.retroarchive.org/cpm/cdrom/


１１．RCCP について

  RCCP.COM は常駐型コンソールコマンドプロセッサです。これにより CP/M 環境に
入って作業をすることができます。

  RCCP.COM は、HI-TECH C 80 付属のアセンブラ ZAS で作成しました。

　使用法
		cpm rccp

　機能
	・コンソールからコマンド行を読み込みプログラムをロード・実行する
	  （拡張子が .com だけでなく .cpm のものもプログラムと認識する）★
	・内部コマンド（後述）を実行する
	・SUBMIT ファイル $$$.SUB を実行する
	  （ A:ドライブだけでなく B:ドライブ上の $$$.SUB も実行できる）★

　内部コマンド

	d:		カレントドライブ変更
	DIR d:		ディレクトリの表示
	TYPE file	ファイルの表示
	REN file=file	ファイル名変更
	ERA file	ファイル削除
	SAVE n file	ファイルに TPA の内容をセーブする
	USER n		User No.を変更　▲
	CONT		直前のコマンドを再実行
			（プログラムをロードせずに実行） ★
	XSUB		内蔵 XSUB.COM ★
	EXIT		RCCP を終了する　★

	　★：CCP に対して拡張された機能
	　▲：cpm.exe で使用できない機能


　MS-DOS 版の CPM.EXE には、常駐型コンソールコマンドプロセッサとして XCCP.COM
を添付していましたが、今回配布条件を GPL に従ったものとすることで、ソースの無
い XCCP.COM の添付が難しくなりました。また XCCP.COM は拡張子が .cpm（オリジナ
ルは .com）にしか対応していませんので、.cpm .com 混在環境での使用が難しくなっ
ていました。そこで、今回 XCCP.COM のサブセットをスクラッチから作成し、ソースと
ともに添付することにしました。

　XCCP.COM と RCCP.COM の違いは以下の通りです。

	・"!" 区切りによるコマンド逐次実行機能が無い
	・LGON file, LOFF コマンドによる画面出力のファイル化機能が無い
	・TYPE コマンドでワイルドカードが使えない

　Win32 版 cpm.exe でも依然として XCCP.COM を使用することができます。DOS 版で
はできなかった SUBMIT ファイルの実行もできるようになります。ただし、SUBMIT コ
マンド自体は本物を入手してください。

  V0.1 では Ctrl-C 入力で RCCP や XCCP ごと終了してしまいましたが、V0.2 以降
では BDOS/BIOS コール実行時であれば Ctrl-C で RCCP や XCCP に戻れるようになり
ました。なお、Ctrl-Break による強制終了は依然として有効です。

	Ctrl-C 入力時の動作：

		| Z80 コード実行中	| BDOS/BIOS コール中
	--------+-----------------------+--------------------
	V0.1	| cpm.exe 自体が終了	| cpm.exe 自体が終了
	V0.2〜	| 無視			| RCCP/XCCP に復帰


１２．その他の添付ファイルについて

　・4GCLOCK.COM 

	　Z80 でおよそ 4000,000,000 クロックを消費するベンチマークテストプログ
	ラムです。時間を消費する以外なにも行いません。終了するまでの時間を計測
	してください。4MHz Z80 では 1000 秒かかるはずです。

	　手元の環境では以下のような結果になりました。

		Athlon 64 X2 5400+ (2.8GHz) Win7 .. 1.20 秒（3.3GHz Z80 相当）
		Core2 Duo E8400 (3.0GHz) Win7    .. 0.81 秒 (4.9GHz Z80 相当)

　・patch$exec.txt

	　HI-TECH C 80 のコマンドインタープリタ $EXEC.COM にパッチをあてるため
	のファイルです。ZSID とRCCP が必要です。

	　HI-TECH C 80 でコンパイルしたプログラムは cpm.exe の -h オプション
	つきで実行することで終了コードを返すことができます。これは HI-TECH
	C 80 プリプロセッサ (CPP.COM) やコンパイラ本体 (CGEN.COM) リンカ
	(LINK.COM) も同じです。

	　ですが、残念なことにコンパイラドライバ (C.COM) は、いつでも成功 0
	しか返しません。このため Makefile 中で cpm -h c prog.c などとした場
	合、コンパイルエラーが起こっても make を中断することができませんでし
	た。

	　そこで、C.COM から呼ばれて実際にプリプロセッサ・コンパイラ本体・リ
	ンカ等を実行する $EXEC.COM にパッチをあて、リターンコード領域をクリア
	しないようにします。具体的には $EXEC.COM の 1BBh バイト目から３バイト
	を 00h (NOP) にします。

	　$EXEC.COM と patch$exec.txt がカレントディレクトリにあり、ZSID.COM
	と RCCP.COM がカレントディレクトリまたは CPMPATH で指定されたディレク
	トリにある条件下で、以下のように path$exec.txt を標準入力にリダイレクト
	して rccp を実行します。

		cpm rccp <patch$exec.txt

	　これでカレントディレクトリの $EXEC.COM にパッチがあたります。オリジ
	ナルは $$EXEC.COM という名前で残ります。

　・INFO0P.COM

	以下のようなゼロページの内容を表示します。

		BIOS ウォームブートエントリアドレス
		BIOS 位置
		BDOS エントリーアドレス
		TPA サイズ
		デフォルト FCB
		コマンドラインパラメタ

	メモリ配置状況や、自動ドライブアサイン結果などを確認できます。

	info0p.c は HI-TECH C 80 でコンパイルできます。

１３．配布条件

　GPL2 に従います。

１４．配布内容

	cpm32_04.txt	このファイル
	cpm.exe 	実行ファイル
	RCCP.COM	常駐型コンソール・コマンド・プロセッサ　実行ファイル
	4GCLOCK.COM	4G クロックプログラム 実行ファイル
	COPYING		GNU GENERAL PUBLIC LICENSE Version 2

	src\		cpm.exe ソース一式
	   Makefile	makeファイル
	   cpm.c 	ソースファイル（CP/Mエミュレータ）
	   em180.asm	　　　〃　　　（HD64180エミュレータ）
	   em180.h	ヘッダファイル（HD64180エミュレータ）
	   mkem180.pl	em180.asm 生成用 perl スクリプト
	   z80op.txt	オペコード表（mkem180.pl で必要）
	   mkz80op.pl	z80op.txt 生成用 perl スクリプト
	   cpm.rc	リソースファイル
	   cpm.ico	アイコンファイル

	utl\		添付プログラムソース一式
	   Makefile	添付プログラム用 make ファイル
	   rccp.as	RCCP ソース（要 HI-TECH C 80）
	   loader.as	 〃 自己リロケータ（要 HI-TECH C 80）
	   4Gclock.as	4G クロックプログラムソース（要 HI-TECH C 80）
	   patch$exec.txt $EXEC.COM パッチデータ（入力リダイレクト用）
	   info0p.c	INFO0P ソース（要 HI-TECH C 80）

１５．来歴

　2005/09/14	V0.1	公開
　2005/09/26		FCB 内部構造変更（rc 7bit化：DRI PL/I-80 リンカ対応）
  2005/10/11		アイコン追加
  2005/12/15	V0.2	Ctrl-C で pc を 0 にするトラップ追加
  2007/01/23		標準出力で CR を削除（CR LF が CR CR LFになっていた）
  2008/12/04	V0.3	オープンファイル再利用方法修正（TURBO PASCAL 対応）
			2TBytes 以上の disk 空き容量に対応
  2012/03/15	V0.4	BDOS 36 (set random record) バグ修正（UNARC 対応）
			画面消去用文字を空白に変更（wineconsole 環境対応）
			VC++/MASM によるビルドに対応
			-C オプション追加
			デフォルト FCB 設定時 "=:;<>" もデリミタとする修正
			Z80（64180）エミュレータで H,N フラグの動作を改善
			画面制御シーケンスのバグ修正
			DEL キーで 7fh が入力されないバグ修正

１６．謝辞

　V0.4 の修正の大部分は藤田望氏のバグレポートおよび修正案に基づくものです。
　藤田望氏に感謝いたします。

１７．作者の連絡先

				keiji-mu@nifty.com	Ｍｕ　村上敬司

